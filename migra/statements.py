import re
from typing import List, Sequence

_DROP_STATEMENT = re.compile(r"(drop\s+)", re.IGNORECASE)


def check_for_drop(s: str) -> bool:
    return bool(_DROP_STATEMENT.search(s))


class Statements(List[str]):
    # TODO: docstring here
    def __init__(self, *args: Sequence[str]):
        self.safe = True
        super(Statements, self).__init__(*args)

    @property
    def sql(self) -> str:
        if self.safe:
            self.raise_if_unsafe()
        if not self:  # _ shouldn't this come before `if self.safe`?
            return ""

        return "\n\n".join(self) + "\n\n"

    def raise_if_unsafe(self) -> None:
        if any(check_for_drop(s) for s in self):
            raise UnsafeMigrationException(
                "unsafe/destructive change being autogenerated, refusing to carry on further"
            )  # _ might be able to use more debug info from `s` and `self` here

    def __add__(self, other: List[str]) -> "Statements":
        self += list(other)
        return self


class UnsafeMigrationException(Exception):
    pass
